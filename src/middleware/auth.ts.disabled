import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import jwt from 'jsonwebtoken';

export function middleware(request: NextRequest) {
  try {
    // Get token from cookie
    const token = request.cookies.get('token')?.value;
    const refreshToken = request.cookies.get('refreshToken')?.value;
    
    // Check if it's an admin route
    const isAdminRoute = 
      request.nextUrl.pathname.startsWith('/admin') || 
      request.nextUrl.pathname.startsWith('/api/admin');
    
    // Check if it's an API route that requires authentication
    const isProtectedApiRoute = 
      request.nextUrl.pathname.startsWith('/api/user') ||
      request.nextUrl.pathname.startsWith('/api/orders') ||
      request.nextUrl.pathname.startsWith('/api/cart') ||
      request.nextUrl.pathname.startsWith('/api/upload');

    // Skip token verification for auth endpoints to avoid circular redirects
    if (request.nextUrl.pathname.startsWith('/api/auth/')) {
      return NextResponse.next();
    }

    // If no token and trying to access protected route
    if (!token && (isAdminRoute || isProtectedApiRoute)) {
      if (request.nextUrl.pathname.startsWith('/api/')) {
        return NextResponse.json({ error: 'Authentication required' }, { status: 401 });
      }
      return NextResponse.redirect(new URL('/login', request.url));
    }

    // If has token, verify for admin routes
    if (token && isAdminRoute) {
      try {
        // Verify access token
        const decoded = jwt.verify(token, process.env.JWT_SECRET!) as {
          userId: string;
          role: string;
        };

        // Check admin access
        if (decoded.role !== 'admin') {
          if (request.nextUrl.pathname.startsWith('/api/')) {
            return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
          }
          return NextResponse.redirect(new URL('/', request.url));
        }

        // Add user info to request headers
        const requestHeaders = new Headers(request.headers);
        requestHeaders.set('userId', decoded.userId);
        requestHeaders.set('userRole', decoded.role);

        return NextResponse.next({
          request: {
            headers: requestHeaders,
          },
        });
      } catch (error) {
        // Token expired, redirect to login if no refresh token
        if (!refreshToken) {
          return NextResponse.redirect(new URL('/login', request.url));
        }
        
        // For UI routes, redirect to login page
        if (!request.nextUrl.pathname.startsWith('/api/')) {
          return NextResponse.redirect(new URL('/login', request.url));
        }
        
        // For API routes, return 401 so client can handle refresh
        return NextResponse.json({ error: 'Token expired' }, { status: 401 });
      }
    }

    // For protected API routes with token
    if (token && isProtectedApiRoute) {
      try {
        // Verify access token
        const decoded = jwt.verify(token, process.env.JWT_SECRET!) as {
          userId: string;
          role: string;
        };

        // Add user info to request headers
        const requestHeaders = new Headers(request.headers);
        requestHeaders.set('userId', decoded.userId);
        requestHeaders.set('userRole', decoded.role);

        return NextResponse.next({
          request: {
            headers: requestHeaders,
          },
        });
      } catch (error) {
        // Token expired, return 401 so client can handle refresh
        return NextResponse.json({ error: 'Token expired' }, { status: 401 });
      }
    }

    return NextResponse.next();
  } catch (error) {
    console.error('Middleware error:', error);
    
    // For API routes, return JSON error
    if (request.nextUrl.pathname.startsWith('/api/')) {
      return NextResponse.json({ error: 'Authentication failed' }, { status: 401 });
    }
    
    // For UI routes, redirect to login
    return NextResponse.redirect(new URL('/login', request.url));
  }
}

// Make sure to include all routes that need protection
export const config = {
  matcher: [
    '/admin/:path*',
    '/api/admin/:path*',
    '/api/upload/:path*',
    '/api/user/:path*',
    '/api/orders/:path*', 
    '/api/cart/:path*'
  ]
};
